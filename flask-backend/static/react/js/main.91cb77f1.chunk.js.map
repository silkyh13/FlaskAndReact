{"version":3,"sources":["BlogPosts.js","App.js","serviceWorker.js","index.js"],"names":["blogPost","data","onClick","edit","map","item","index","className","key","topic","id","content","created_at","App","props","get","fetch","then","response","json","result","setState","posts","catch","error","console","log","add","e","delete","target","method","state","componentDidMount","bind","this","BlogPosts","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"uPAuBeA,G,MArBE,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,KAAMC,EAAoB,EAApBA,QAASC,EAAW,EAAXA,KACjC,OACE,6BACGF,EAAKG,KAAI,SAACC,EAAMC,GACf,OACE,yBAAKC,UAAU,UAAUC,IAAKF,GAC5B,yBAAKC,UAAU,YAAYF,EAAKI,OAChC,yBAAKF,UAAU,WAAWG,GAAIL,EAAKI,MAAOP,QAASC,GAChDE,EAAKM,QADR,WAGA,yBAAKJ,UAAU,YAAYF,EAAKO,YAChC,4BAAQL,UAAU,WAAWG,GAAIL,EAAKI,MAAOP,QAASA,GAAtD,iBCwDGW,E,kDAhEb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAURC,IAAM,WACJC,MAAM,SACHC,MAAK,SAAUC,GACd,OAAOA,EAASC,UAEjBF,MAAK,SAACG,GACL,EAAKC,SAAS,CAAEC,MAAOF,OAExBG,OAAM,SAAUC,GACfC,QAAQC,IAAI,iBAAkBF,OApBjB,EAuBnBG,IAAM,SAACC,KAvBY,EAwBnBC,OAAS,SAACD,GACR,IAAIlB,EAAKkB,EAAEE,OAAOpB,GAClB,OAAOM,MAAM,WAAkBN,EAAI,CACjCqB,OAAQ,WACPd,MAAK,SAACC,GACPA,EAASC,OACT,EAAKJ,UA9BU,EAkCnBZ,KAAO,SAACyB,GACN,IAAIlB,EAAKkB,EAAEE,OAAOpB,GAClBe,QAAQC,IAAI,OAAQhB,IAlCpB,EAAKsB,MAAQ,CACXV,MAAO,IAET,EAAKW,kBAAoB,EAAKA,kBAAkBC,KAAvB,gBALR,E,gEAQjBC,KAAKpB,Q,+BA+BL,OACE,yBAAKR,UAAU,OACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,sBACb,yBAAKA,UAAU,YAAf,SACA,yBAAKA,UAAU,YAAf,QACA,yBAAKA,UAAU,YAAf,QACA,yBAAKA,UAAU,YAAf,YAGJ,kBAAC6B,EAAD,CACEnC,KAAMkC,KAAKH,MAAMV,MACjBnB,KAAMgC,KAAKhC,KACXD,QAASiC,KAAKN,UAGlB,yBAAKtB,UAAU,WAAWL,QAASiC,KAAKR,KAAxC,U,GAzDUU,IAAMC,WCQJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlC,MAAK,SAAAmC,GACJA,EAAaC,gBAEd9B,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM8B,a","file":"js/main.91cb77f1.chunk.js","sourcesContent":["import React from \"react\";\n\nconst blogPost = ({ data, onClick, edit }) => {\n  return (\n    <div>\n      {data.map((item, index) => {\n        return (\n          <div className=\"txn-row\" key={index}>\n            <div className=\"txn-data\">{item.topic}</div>\n            <div className=\"txn-data\" id={item.topic} onClick={edit}>\n              {item.content} &#9999;\n            </div>\n            <div className=\"txn-data\">{item.created_at}</div>\n            <button className=\"txn-data\" id={item.topic} onClick={onClick}>\n              &#9587;\n            </button>\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default blogPost;\n","import React from \"react\";\nimport \"./App.css\";\nimport BlogPosts from \"./BlogPosts\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      posts: [],\n    };\n    this.componentDidMount = this.componentDidMount.bind(this);\n  }\n  componentDidMount() {\n    this.get();\n  }\n\n  get = () => {\n    fetch(\"/find\")\n      .then(function (response) {\n        return response.json();\n      })\n      .then((result) => {\n        this.setState({ posts: result });\n      })\n      .catch(function (error) {\n        console.log(\"Request failed\", error);\n      });\n  };\n  add = (e) => {};\n  delete = (e) => {\n    let id = e.target.id;\n    return fetch(\"/delete\" + \"/\" + id, {\n      method: \"delete\",\n    }).then((response) => {\n      response.json();\n      this.get();\n    });\n  };\n\n  edit = (e) => {\n    let id = e.target.id;\n    console.log(\"edit\", id);\n  };\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"txn\">\n          <div className=\"txn-table\">\n            <div className=\"txn-header txn-row\">\n              <div className=\"txn-data\">Topic</div>\n              <div className=\"txn-data\">Post</div>\n              <div className=\"txn-data\">Date</div>\n              <div className=\"txn-data\">Delete</div>\n            </div>\n          </div>\n          <BlogPosts\n            data={this.state.posts}\n            edit={this.edit}\n            onClick={this.delete}\n          />\n        </div>\n        <div className=\"add-data\" onClick={this.add}>\n          &#43;\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}